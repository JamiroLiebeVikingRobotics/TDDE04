# Skriv namn på de som lämnat in här i kommentaren för enklare tillgång
import bpy 
from mathutils import Vector
from random import uniform


up = Vector((0.0, 0.0, 1.0))
planet = bpy.data.objects["planet"]
blomma = bpy.data.objects["blomma"]
flowerList = list(bpy.data.collections["add"].objects)
flowerPos = []

help = bpy.data.texts["helper"].as_module()
#if len(list(bpy.data.collections["add"].objects)) > 0:
#    help.clean("add")
    
    
def distance_vec(point1: Vector, point2: Vector) -> float:
    return (point2 - point1).length 


def randomray():
    r = Vector((uniform(-1,1),uniform(-1,1),uniform(-1,1)))
    while r.magnitude == 0.0:
        r = Vector((uniform(-1,1),uniform(-1,1),uniform(-1,1)))
    r.normalize()
    return r

while len(flowerList) < 200:
    rand_ray = randomray()

    dp = bpy.context.view_layer.depsgraph
    begin = planet.location + rand_ray*10
    direction = planet.location - begin

    res = bpy.context.scene.ray_cast(dp, begin, direction)
    hit, loc, norm, poly_ind, obj, mtrx = res

    #print(planet.data.polygons[poly_ind].material_index)
 
    if hit and planet.data.polygons[poly_ind].material_index == 0:
        up = Vector((0.0, 0.0, 1.0))
        #rot = up.rotation_difference(norm).to_euler()
        #blomma.rotation_euler = rot
        help.copy_obj(blomma, "add", loc.copy(), norm)
        
        ####################################################
        #Koden funkar fram hit
        if len(flowerList) > 1:
            for obj in flowerList:
                for i in range(len(flowerList)):
                    if distance_vec(flowerList[i].location, flowerList[i-1].location) < 3:
                       print(distance_vec(flowerList[i].location, flowerList[i-1].location))
            
        
